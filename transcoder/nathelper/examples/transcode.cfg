fork=no
log_stderror=yes

check_via=no	# (cmd. line: -v)
dns=no           # (cmd. line: -r)
rev_dns=no      # (cmd. line: -R)

loadmodule "/usr/local/lib/ser/modules/sl.so"
loadmodule "/usr/local/lib/ser/modules/tm.so"
loadmodule "/usr/local/lib/ser/modules/rr.so"
loadmodule "/usr/local/lib/ser/modules/maxfwd.so"
loadmodule "/usr/local/lib/ser/modules/usrloc.so"
loadmodule "/usr/local/lib/ser/modules/registrar.so"
loadmodule "/usr/local/lib/ser/modules/textops.so"
loadmodule "/usr/local/lib/ser/modules/nathelper.so"

modparam("usrloc", "db_mode",   0)
modparam("rr", "enable_full_lr", 1)

route{
	
	# initial sanity checks -- messages with
	# max_forwards==0, or excessively long requests
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		break;
	};
	if (msg:len >=  max_len ) {
		sl_send_reply("513", "Message too big");
		break;
	};
	if (!method=="REGISTER") record_route();	
	if (method=="REGISTER"){
		sl_send_reply("200","OK");
		break;
	};

	# native SIP destinations are handled using our USRLOC DB
	route(1);
}

route[1] 
{	
	if(method=="INVITE"){
		## G = GSM, I = ILBC, 0 = G711u
		## remember to have the opesit in on_reply_route;
		force_rtp_transcode("G","129.240.117.45");
		t_on_reply("1");
	};
	# I'm way to lazy to have a location table :p
	rewritehostport("129.240.117.163:5060");
	if (!t_relay()) {
		sl_reply_error();
	};
}

onreply_route[1]
{
	if(status =~"200"){
		force_rtp_transcode("D","129.240.117.45");
	};
}
